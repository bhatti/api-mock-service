{
  "info": {
    "name": "API Testing Suite",
    "description": "Basic CRUD API testing collection with auth and validation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Get JWT Token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate timestamp",
                  "const datetime = new Date().toISOString()",
                  "// Build payload",
                  "const payload = {",
                  "    'name': pm.environment.get('client_name'),",
                  "    'organization': pm.environment.get('org_id'),",
                  "    'datetime': datetime",
                  "};"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.environment.set('access_token', responseBody.access_token);",
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-api-key",
                "value": "{{api_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"jws\": \"{{jws}}\"}"
            },
            "url": {
              "raw": "{{base_url}}/auth/token",
              "host": ["{{base_url}}"],
              "path": ["auth", "token"]
            }
          }
        }
      ]
    },
    {
      "name": "CRUD Operations",
      "item": [
        {
          "name": "Create Resource",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [{"key": "token", "value": "{{access_token}}"}]
            },
            "method": "POST",
            "header": [
              {
                "key": "x-api-key",
                "value": "{{api_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"test resource\",\n  \"description\": \"test description\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/resources",
              "host": ["{{base_url}}"],
              "path": ["api", "resources"]
            }
          }
        },
        {
          "name": "Get Resource",
          "request": {
            "auth": {
              "type": "bearer"
            },
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/resources/{{resource_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "resources", "{{resource_id}}"]
            }
          }
        },
        {
          "name": "Update Resource",
          "request": {
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"updated name\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/resources/{{resource_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "resources", "{{resource_id}}"]
            }
          }
        },
        {
          "name": "Delete Resource",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}/api/resources/{{resource_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "resources", "{{resource_id}}"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global prerequest script",
          "if (!pm.environment.get('access_token')) {",
          "    postman.setNextRequest('Get JWT Token');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test script",
          "pm.test('Response time is acceptable', () => {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test('Response has valid structure', () => {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
