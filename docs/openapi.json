{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "MOCK_SERVER_BASE_URL"
    }
  ],
  "paths": {
    "/_contracts/{group}": {
      "post": {
        "tags": [
          "producer-contract"
        ],
        "summary": "Invokes service api-contract by group of api contracts.",
        "operationId": "postProducerContractGroupScenario",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Group"
            },
            "x-go-name": "Group"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ProducerContractRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProducerContractResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "Body"
      }
    },
    "/_contracts/{method}/{name}/{path}": {
      "post": {
        "tags": [
          "producer-contract"
        ],
        "summary": "Invokes service api-contract by method, contracts-name and path.",
        "operationId": "postProducerContractScenarioByPath",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ProducerContractRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProducerContractResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "Body"
      }
    },
    "/_contracts/history/{group}": {
      "post": {
        "tags": [
          "producer-contract"
        ],
        "summary": "Invokes service api-contract using executed history of consumer contracts.",
        "operationId": "postProducerContractHistoryByGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Group"
            },
            "x-go-name": "Group"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ProducerContractRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProducerContractResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "Body"
      }
    },
    "/_fixtures/{method}/{name}/{path}": {
      "get": {
        "tags": [
          "api-test-fixtures"
        ],
        "summary": "Finds an existing api-test-fixtures based on name and path.",
        "operationId": "getAPITestFixture",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "responses": {
          "200": {
            "description": "APIFixture body for update",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "api-test-fixtures"
        ],
        "summary": "Creates new api-test-fixtures based on request body.",
        "operationId": "postAPITestFixture",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIFixture body for update",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "Body"
      },
      "delete": {
        "tags": [
          "api-test-fixtures"
        ],
        "summary": "Deletes an existing api-test-fixtures based on name and path.",
        "operationId": "deleteAPITestFixture",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/_fixtures/{method}/fixtures/{path}": {
      "get": {
        "tags": [
          "api-test-fixtures"
        ],
        "summary": "Finds api test-fixture names for given method and path.",
        "operationId": "getAPITestFixtureNames",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "responses": {
          "200": {
            "description": "APIFixture names",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_oapi": {
      "post": {
        "tags": [
          "open-api"
        ],
        "summary": "Creates new api scenarios based on Open API v3 uploaded by user.",
        "operationId": "postMockOAPIScenario",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIScenario"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "Body"
      }
    },
    "/_oapi/{group}": {
      "get": {
        "tags": [
          "open-api"
        ],
        "summary": "Generates OpenAPI specs by group of API scenarios.",
        "operationId": "getOpenAPISpecsByGroup",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Group"
            },
            "x-go-name": "Group"
          }
        ],
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_oapi/{method}/{name}/{path}": {
      "get": {
        "tags": [
          "open-api"
        ],
        "summary": "Generates OpenAPI specs for the API scenario by method, name and path.",
        "operationId": "getOpenAPISpecsByScenario",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_oapi/history/{name}": {
      "get": {
        "tags": [
          "open-api"
        ],
        "summary": "Generates OpenAPI specs based on name of API scenario from execution history.",
        "operationId": "getOpenAPISpecsByHistory",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of open-api spec",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          }
        ],
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_proxy": {
      "get": {
        "tags": [
          "api-proxy"
        ],
        "summary": "Records scenario for the API GET request.",
        "operationId": "getAPIProxy"
      },
      "put": {
        "tags": [
          "api-proxy"
        ],
        "summary": "Records scenario for the API PUT request.",
        "operationId": "putAPIProxy"
      },
      "post": {
        "tags": [
          "api-proxy"
        ],
        "summary": "Records scenario for the API POST request.",
        "operationId": "postAPIProxy"
      },
      "delete": {
        "tags": [
          "api-proxy"
        ],
        "summary": "Records scenario for the API DELETE request.",
        "operationId": "deleteAPIProxy"
      }
    },
    "/_scenarios": {
      "get": {
        "tags": [
          "api-scenarios"
        ],
        "summary": "List paths of all scenarios with group if available.",
        "operationId": "listMockScenario",
        "responses": {
          "200": {
            "description": "APIScenario summary and paths",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/APIKeyData"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "api-scenarios"
        ],
        "summary": "Creates new api scenario based on request body.",
        "operationId": "postMockScenario",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/APIScenario"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "APIScenario body for update",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIScenario"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "Body"
      }
    },
    "/_scenarios/{method}/{name}/{path}": {
      "get": {
        "tags": [
          "api-scenarios"
        ],
        "summary": "Deletes an existing api scenario based on id.",
        "operationId": "getAPIScenario",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "api-scenarios"
        ],
        "summary": "Deletes an existing api scenario based on id.",
        "operationId": "getAPIScenario",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Name"
            },
            "x-go-name": "Name"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/_scenarios/{method}/names/{path}": {
      "get": {
        "tags": [
          "api-scenarios"
        ],
        "summary": "Finds api scenario names by method and path.",
        "operationId": "getAPIScenarioNames",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Method"
            },
            "x-go-name": "Method"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ],
        "responses": {
          "200": {
            "description": "APIScenario names",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_scenarios/groups": {
      "get": {
        "tags": [
          "api-scenarios"
        ],
        "summary": "Finds api scenario groups.",
        "operationId": "getAPIGroups",
        "responses": {
          "200": {
            "description": "APIScenario groups",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_scenarios/history": {
      "get": {
        "tags": [
          "api-scenarios"
        ],
        "summary": "Fetches history of api scenarios by group.",
        "operationId": "apiScenarioHistory",
        "responses": {
          "200": {
            "description": "APIScenario history scenario names",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{path}": {
      "get": {
        "tags": [
          "consumer-contract"
        ],
        "summary": "Play API scenario for previously defined API contract based on GET request.",
        "operationId": "getRoot",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ]
      },
      "put": {
        "tags": [
          "consumer-contract"
        ],
        "summary": "Play API scenario for previously defined API contract based on PUT request.",
        "operationId": "putRoot",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ]
      },
      "post": {
        "tags": [
          "consumer-contract"
        ],
        "summary": "Play API scenario for previously defined API contract based on POST request.",
        "operationId": "postRoot",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ]
      },
      "delete": {
        "tags": [
          "consumer-contract"
        ],
        "summary": "Play API scenario for previously defined API contract based on DELETE request.",
        "operationId": "deleteRoot",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ]
      },
      "options": {
        "tags": [
          "consumer-contract"
        ],
        "summary": "Play API scenario for previously defined API contract based on OPTIONS request.",
        "operationId": "optionsRoot",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ]
      },
      "head": {
        "tags": [
          "consumer-contract"
        ],
        "summary": "Play API scenario for previously defined API contract based on HEAD request.",
        "operationId": "headRoot",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ]
      },
      "patch": {
        "tags": [
          "consumer-contract"
        ],
        "summary": "Play API scenario for previously defined API contract based on PATCH request.",
        "operationId": "patchRoot",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Path"
            },
            "x-go-name": "Path"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIAuthorization": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "x-go-name": "Format"
          },
          "in": {
            "type": "string",
            "x-go-name": "In"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "scheme": {
            "type": "string",
            "x-go-name": "Scheme"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "description": "APIAuthorization defines mock auth parameters",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      },
      "APIKeyData": {
        "type": "object",
        "properties": {
          "LastUsageTime": {
            "type": "integer",
            "description": "LastUsageTime of key data",
            "format": "int64"
          },
          "RequestCount": {
            "type": "integer",
            "description": "RequestCount for the API",
            "format": "uint64"
          },
          "assert_contents_pattern": {
            "type": "string",
            "description": "AssertContentsPattern for request optionally",
            "x-go-name": "AssertContentsPattern"
          },
          "assert_headers_pattern": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "AssertHeadersPattern for api response",
            "x-go-name": "AssertHeadersPattern"
          },
          "assert_query_params_pattern": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "AssertQueryParamsPattern for the API",
            "x-go-name": "AssertQueryParamsPattern"
          },
          "group": {
            "type": "string",
            "description": "Group of scenario",
            "x-go-name": "Group"
          },
          "method": {
            "$ref": "#/components/schemas/MethodType"
          },
          "name": {
            "type": "string",
            "description": "Name to uniquely identify the scenario",
            "x-go-name": "Name"
          },
          "order": {
            "type": "integer",
            "description": "Order of scenario",
            "format": "int64",
            "x-go-name": "Order"
          },
          "path": {
            "type": "string",
            "description": "Path for the API (excluding query params)",
            "x-go-name": "Path"
          },
          "predicate": {
            "type": "string",
            "description": "Predicate for the request",
            "x-go-name": "Predicate"
          },
          "tags": {
            "type": "array",
            "description": "Tags of scenario",
            "items": {
              "type": "string"
            },
            "x-go-name": "Tags"
          }
        },
        "description": "APIKeyData defines keys of api scenario for in-memory store",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      },
      "APIRequest": {
        "type": "object",
        "properties": {
          "assert_contents_pattern": {
            "type": "string",
            "description": "AssertContentsPattern for request optionally",
            "x-go-name": "AssertContentsPattern"
          },
          "assert_headers_pattern": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "AssertHeadersPattern for mock response",
            "x-go-name": "AssertHeadersPattern"
          },
          "assert_query_params_pattern": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "AssertQueryParamsPattern for the API",
            "x-go-name": "AssertQueryParamsPattern"
          },
          "assertions": {
            "type": "array",
            "description": "Assertions for validating response",
            "items": {
              "type": "string"
            },
            "x-go-name": "Assertions"
          },
          "contents": {
            "type": "string",
            "description": "Contents for request optionally",
            "x-go-name": "Contents"
          },
          "example_contents": {
            "type": "string",
            "description": "ExampleContents sample for request optionally",
            "x-go-name": "ExampleContents"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Headers for mock response",
            "x-go-name": "Headers"
          },
          "path_params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "PathParams sample for the API",
            "x-go-name": "PathParams"
          },
          "query_params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "QueryParams sample for the API",
            "x-go-name": "QueryParams"
          }
        },
        "description": "APIRequest defines mock request for APIs",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      },
      "APIResponse": {
        "type": "object",
        "properties": {
          "assert_contents_pattern": {
            "type": "string",
            "description": "AssertContentsPattern for request optionally",
            "x-go-name": "AssertContentsPattern"
          },
          "assert_headers_pattern": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "AssertHeadersPattern for mock response",
            "x-go-name": "AssertHeadersPattern"
          },
          "assertions": {
            "type": "array",
            "description": "Assertions for validating response",
            "items": {
              "type": "string"
            },
            "x-go-name": "Assertions"
          },
          "contents": {
            "type": "string",
            "description": "Contents for request",
            "x-go-name": "Contents"
          },
          "contents_file": {
            "type": "string",
            "description": "ContentsFile for request",
            "x-go-name": "ContentsFile"
          },
          "example_contents": {
            "type": "string",
            "description": "ExampleContents sample for response optionally",
            "x-go-name": "ExampleContents"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Headers for mock response",
            "x-go-name": "Headers"
          },
          "pipe_properties": {
            "type": "array",
            "description": "PipeProperties to extract properties from response",
            "items": {
              "type": "string"
            },
            "x-go-name": "PipeProperties"
          },
          "status_code": {
            "type": "integer",
            "description": "StatusCode for response",
            "format": "int64",
            "x-go-name": "StatusCode"
          }
        },
        "description": "APIResponse defines mock response for APIs",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      },
      "APIScenario": {
        "type": "object",
        "properties": {
          "authentication": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/APIAuthorization"
            },
            "description": "Authentication for the API",
            "x-go-name": "Authentication"
          },
          "base_url": {
            "type": "string",
            "description": "BaseURL of remote server",
            "x-go-name": "BaseURL"
          },
          "description": {
            "type": "string",
            "description": "Description of scenario",
            "x-go-name": "Description"
          },
          "group": {
            "type": "string",
            "description": "Group of scenario",
            "x-go-name": "Group"
          },
          "method": {
            "$ref": "#/components/schemas/MethodType"
          },
          "name": {
            "type": "string",
            "description": "Name to uniquely identify the scenario",
            "x-go-name": "Name"
          },
          "order": {
            "type": "integer",
            "description": "Order of scenario",
            "format": "int64",
            "x-go-name": "Order"
          },
          "path": {
            "type": "string",
            "description": "Path for the API (excluding query params)",
            "x-go-name": "Path"
          },
          "predicate": {
            "type": "string",
            "description": "Predicate for the request",
            "x-go-name": "Predicate"
          },
          "request": {
            "$ref": "#/components/schemas/APIRequest"
          },
          "response": {
            "$ref": "#/components/schemas/APIResponse"
          },
          "tags": {
            "type": "array",
            "description": "Tags of scenario",
            "items": {
              "type": "string"
            },
            "x-go-name": "Tags"
          },
          "wait_before_reply": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "description": "APIScenario defines mock scenario for APIs",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      },
      "Duration": {
        "type": "integer",
        "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
        "format": "int64",
        "x-go-package": "time"
      },
      "MethodType": {
        "type": "string",
        "description": "MethodType for HTTP",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      },
      "ProducerContractRequest": {
        "type": "object",
        "properties": {
          "base_url": {
            "type": "string",
            "description": "BaseURL of remote server",
            "x-go-name": "BaseURL"
          },
          "execution_times": {
            "type": "integer",
            "description": "ExecutionTimes for contract testing",
            "format": "int64",
            "x-go-name": "ExecutionTimes"
          },
          "verbose": {
            "type": "boolean",
            "description": "Verbose setting",
            "x-go-name": "Verbose"
          }
        },
        "description": "ProducerContractRequest for generating fuzz-data requests to an API implementation for producer based contract testing",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      },
      "ProducerContractResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Errors"
          },
          "failed": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Failed"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "x-go-name": "Metrics"
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Results"
          },
          "succeeded": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Succeeded"
          },
          "urls": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "URLs"
          }
        },
        "description": "ProducerContractResponse for returning summary of producer based test results",
        "x-go-package": "github.com/bhatti/api-mock-service/internal/types"
      }
    },
    "responses": {
      "apiFixtureNamesResponse": {
        "description": "APIFixture names",
        "content": {
          "*/*": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "apiFixtureResponse": {
        "description": "APIFixture body for update",
        "content": {
          "*/*": {
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        }
      },
      "apiGroupsResponse": {
        "description": "APIScenario groups",
        "content": {
          "*/*": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "apiHistoryResponse": {
        "description": "APIScenario history scenario names",
        "content": {
          "*/*": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "apiNamesResponse": {
        "description": "APIScenario names",
        "content": {
          "*/*": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "apiOapiSpecIResponse": {
        "description": "APIScenario body for update",
        "content": {
          "*/*": {
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            }
          }
        }
      },
      "apiScenarioContractResponse": {
        "description": "APIScenario body for update",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ProducerContractResponse"
            }
          }
        }
      },
      "apiScenarioOAPIResponse": {
        "description": "APIScenario body for update",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/APIScenario"
            }
          }
        }
      },
      "apiScenarioPathsResponse": {
        "description": "APIScenario summary and paths",
        "content": {
          "*/*": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/APIKeyData"
              }
            }
          }
        }
      },
      "apiScenarioResponse": {
        "description": "APIScenario body for update",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/APIScenario"
            }
          }
        }
      },
      "emptyResponse": {
        "description": "",
        "content": {}
      }
    }
  }
}
