definitions:
  APIAuthorization:
    description: APIAuthorization defines mock auth parameters
    properties:
      format:
        type: string
        x-go-name: Format
      in:
        type: string
        x-go-name: In
      name:
        type: string
        x-go-name: Name
      scheme:
        type: string
        x-go-name: Scheme
      type:
        type: string
        x-go-name: Type
      url:
        type: string
        x-go-name: URL
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types
  APIKeyData:
    description: APIKeyData defines keys of api scenario for in-memory store
    properties:
      LastUsageTime:
        description: LastUsageTime of key data
        format: int64
        type: integer
      RequestCount:
        description: RequestCount for the API
        format: uint64
        type: integer
      assert_contents_pattern:
        description: AssertContentsPattern for request optionally
        type: string
        x-go-name: AssertContentsPattern
      assert_headers_pattern:
        additionalProperties:
          type: string
        description: AssertHeadersPattern for api response
        type: object
        x-go-name: AssertHeadersPattern
      assert_post_params_pattern:
        additionalProperties:
          type: string
        description: AssertPostParamsPattern for the API
        type: object
        x-go-name: AssertPostParamsPattern
      assert_query_params_pattern:
        additionalProperties:
          type: string
        description: AssertQueryParamsPattern for the API
        type: object
        x-go-name: AssertQueryParamsPattern
      group:
        description: Group of scenario
        type: string
        x-go-name: Group
      method:
        $ref: '#/definitions/MethodType'
      name:
        description: Name to uniquely identify the scenario
        type: string
        x-go-name: Name
      order:
        description: Order of scenario
        format: int64
        type: integer
        x-go-name: Order
      path:
        description: Path for the API (excluding query params)
        type: string
        x-go-name: Path
      predicate:
        description: Predicate for the request
        type: string
        x-go-name: Predicate
      tags:
        description: Tags of scenario
        items:
          type: string
        type: array
        x-go-name: Tags
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types
  APIRequest:
    description: APIRequest defines mock request for APIs
    properties:
      assert_contents_pattern:
        description: AssertContentsPattern for request optionally
        type: string
        x-go-name: AssertContentsPattern
      assert_headers_pattern:
        additionalProperties:
          type: string
        description: AssertHeadersPattern for mock response
        type: object
        x-go-name: AssertHeadersPattern
      assert_post_params_pattern:
        additionalProperties:
          type: string
        description: AssertPostParamsPattern for the API
        type: object
        x-go-name: AssertPostParamsPattern
      assert_query_params_pattern:
        additionalProperties:
          type: string
        description: AssertQueryParamsPattern for the API
        type: object
        x-go-name: AssertQueryParamsPattern
      assertions:
        description: Assertions for validating response
        items:
          type: string
        type: array
        x-go-name: Assertions
      contents:
        description: Contents for request optionally
        type: string
        x-go-name: Contents
      example_contents:
        description: ExampleContents sample for request optionally
        type: string
        x-go-name: ExampleContents
      headers:
        additionalProperties:
          type: string
        description: Headers for mock response
        type: object
        x-go-name: Headers
      http_version:
        description: HTTPVersion version of http
        type: string
        x-go-name: HTTPVersion
      path_params:
        additionalProperties:
          type: string
        description: PathParams for the API
        type: object
        x-go-name: PathParams
      post_params:
        additionalProperties:
          type: string
        description: PostParams for the API
        type: object
        x-go-name: PostParams
      query_params:
        additionalProperties:
          type: string
        description: QueryParams for the API
        type: object
        x-go-name: QueryParams
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types
  APIResponse:
    description: APIResponse defines mock response for APIs
    properties:
      assert_contents_pattern:
        description: AssertContentsPattern for request optionally
        type: string
        x-go-name: AssertContentsPattern
      assert_headers_pattern:
        additionalProperties:
          type: string
        description: AssertHeadersPattern for mock response
        type: object
        x-go-name: AssertHeadersPattern
      assertions:
        description: Assertions for validating response
        items:
          type: string
        type: array
        x-go-name: Assertions
      contents:
        description: Contents for request
        type: string
        x-go-name: Contents
      contents_file:
        description: ContentsFile for request
        type: string
        x-go-name: ContentsFile
      example_contents:
        description: ExampleContents sample for response optionally
        type: string
        x-go-name: ExampleContents
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        description: Headers for mock response
        type: object
        x-go-name: Headers
      http_version:
        description: HTTPVersion version of http
        type: string
        x-go-name: HTTPVersion
      set_variables:
        description: SetVariables to set shared variables from response
        items:
          type: string
        type: array
        x-go-name: SetVariables
      status_code:
        description: StatusCode for response
        format: int64
        type: integer
        x-go-name: StatusCode
      unset_variables:
        description: UnsetVariables to reset shared variables
        items:
          type: string
        type: array
        x-go-name: UnsetVariables
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types
  APIScenario:
    description: APIScenario defines mock scenario for APIs
    properties:
      authentication:
        additionalProperties:
          $ref: '#/definitions/APIAuthorization'
        description: Authentication for the API
        type: object
        x-go-name: Authentication
      base_url:
        description: BaseURL of remote server
        type: string
        x-go-name: BaseURL
      description:
        description: Description of scenario
        type: string
        x-go-name: Description
      group:
        description: Group of scenario
        type: string
        x-go-name: Group
      method:
        $ref: '#/definitions/MethodType'
      name:
        description: Name to uniquely identify the scenario
        type: string
        x-go-name: Name
      order:
        description: Order of scenario
        format: int64
        type: integer
        x-go-name: Order
      path:
        description: Path for the API (excluding query params)
        type: string
        x-go-name: Path
      predicate:
        description: Predicate for the request
        type: string
        x-go-name: Predicate
      request:
        $ref: '#/definitions/APIRequest'
      response:
        $ref: '#/definitions/APIResponse'
      tags:
        description: Tags of scenario
        items:
          type: string
        type: array
        x-go-name: Tags
      wait_before_reply:
        $ref: '#/definitions/Duration'
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
    x-go-package: time
  Har:
    description: Har is a container type for deserialization
    properties:
      log:
        $ref: '#/definitions/HarLog'
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarBrowser:
    description: HarBrowser that created the log
    properties:
      comment:
        description: Optional. A comment provided by the user or the browser.
        type: string
        x-go-name: Comment
      name:
        description: Required. The name of the browser that created the log.
        type: string
        x-go-name: Name
      version:
        description: Required. The version number of the browser that created the
          log.
        type: string
        x-go-name: Version
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarCache:
    properties:
      afterRequest:
        $ref: '#/definitions/HarCacheObject'
      beforeRequest:
        $ref: '#/definitions/HarCacheObject'
      comment:
        description: optional (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
    title: HarCache contains info about a request coming from browser cache.
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarCacheObject:
    description: HarCacheObject is used by both beforeRequest and afterRequest
    properties:
      comment:
        description: optional (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      eTag:
        description: Etag
        type: string
        x-go-name: ETag
      expires:
        description: optional - Expiration time of the cache entry.
        type: string
        x-go-name: Expires
      hitCount:
        description: The number of times the cache entry has been opened.
        format: int64
        type: integer
        x-go-name: HitCount
      lastAccess:
        description: The last time the cache entry was opened.
        type: string
        x-go-name: LastAccess
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarCookie:
    properties:
      comment:
        description: optional (new in 1.2) A comment provided by the user or the application.
        type: boolean
        x-go-name: Comment
      domain:
        description: optional The host of the cookie.
        type: string
        x-go-name: Domain
      expires:
        description: |-
          optional HarCookie expiration time.
          (ISO 8601 YYYY-MM-DDThh:mm:ss.sTZD, e.g. 2009-07-24T19:20:30.123+02:00).
        type: string
        x-go-name: Expires
      httpOnly:
        description: optional Set to true if the cookie is HTTP only, false otherwise.
        type: boolean
        x-go-name: HTTPOnly
      name:
        description: The name of the cookie.
        type: string
        x-go-name: Name
      path:
        description: optional The path pertaining to the cookie.
        type: string
        x-go-name: Path
      secure:
        description: |-
          optional (new in 1.2) True if the cookie was transmitted over ssl, false
          otherwise.
        type: boolean
        x-go-name: Secure
      value:
        description: The cookie value.
        type: string
        x-go-name: Value
    title: HarCookie contains list of all cookies (used in <request> and <response>
      objects).
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarCreator:
    description: HarCreator contains information about the log creator application
    properties:
      comment:
        description: Optional. A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      name:
        description: Required. The name of the application that created the log.
        type: string
        x-go-name: Name
      version:
        description: Required. The version number of the application that created
          the log.
        type: string
        x-go-name: Version
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarEntry:
    description: Leave out this field if the application does not support grouping
      by pages.
    properties:
      cache:
        $ref: '#/definitions/HarCache'
      comment:
        description: (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      connection:
        description: |-
          optional (new in 1.2) Unique ID of the parent TCP/IP connection, can be
          the client port number. Note that a port number doesn't have to be unique
          identifier in cases where the port is shared for more connections. If the
          port isn't available for the application, any other unique connection ID
          can be used instead (e.g. connection index). Leave out this field if the
          application doesn't support this info.
        type: string
        x-go-name: Connection
      pageTimings:
        $ref: '#/definitions/PageTimings'
      pageref:
        type: string
        x-go-name: PageRef
      request:
        $ref: '#/definitions/HarRequest'
      response:
        $ref: '#/definitions/HarResponse'
      serverIPAddress:
        description: |-
          optional (new in 1.2) IP address of the server that was connected
          (result of DNS resolution).
        type: string
        x-go-name: ServerIPAddress
      startedDateTime:
        description: |-
          Date and time stamp of the request start
          (ISO 8601 YYYY-MM-DDThh:mm:ss.sTZD).
        type: string
        x-go-name: StartedDateTime
      time:
        description: |-
          Total elapsed time of the request in milliseconds. This is the sum of all
          timings available in the timings object (i.e. not including -1 values) .
        format: float
        type: number
        x-go-name: Time
      title:
        type: string
        x-go-name: Title
    title: HarEntry is a unique, optional Reference to the parent page.
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarLog:
    properties:
      browser:
        $ref: '#/definitions/HarBrowser'
      comment:
        description: |-
          Optional. A comment provided by the user or the application. Sorting
          entries by startedDateTime (starting from the oldest) is preferred way how
          to export data since it can make importing faster. However, the reader
          application should always make sure the array is sorted (if required for
          the import).
        type: string
        x-go-name: Comment
      creator:
        $ref: '#/definitions/HarCreator'
      entries:
        description: |-
          Required. An array of objects of type entry, each representing one
          exported (tracked) HTTP request.
        items:
          $ref: '#/definitions/HarEntry'
        type: array
        x-go-name: Entries
      pages:
        description: |-
          Optional. An array of objects of type page, each representing one exported
          (tracked) page. Leave out this field if the application does not support
          grouping by pages.
        items:
          $ref: '#/definitions/HarPage'
        type: array
        x-go-name: Pages
      version:
        description: Required. Version number of the format.
        type: string
        x-go-name: Version
    title: HarLog represents the root of the exported data. This object MUST be present
      and its name MUST be "log".
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarPage:
    description: |-
      In case when an HTTP trace tool isn't able to group requests by a page,
      the <pages> object is empty and individual requests doesn't have a parent page.
    properties:
      comment:
        description: (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      id:
        description: Unique identifier of a page within the . Entries use it to refer
          the parent page.
        type: string
        x-go-name: ID
      pageTiming:
        $ref: '#/definitions/PageTiming'
      startedDateTime:
        description: |-
          Date and time stamp for the beginning of the page load
          (ISO 8601 YYYY-MM-DDThh:mm:ss.sTZD, e.g. 2009-07-24T19:20:30.45+01:00).
        type: string
        x-go-name: StartedDateTime
      title:
        description: HarPage title.
        type: string
        x-go-name: Title
    title: HarPage object for every exported web page and one <entry> object for every
      HTTP request.
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarPostData:
    properties:
      comment:
        description: |-
          optional (new in 1.2) A comment provided by the user or the
          application.
        type: string
        x-go-name: Comment
      mimeType:
        description: Mime type of posted data.
        type: string
        x-go-name: MimeType
      params:
        description: List of posted parameters (in case of URL encoded parameters).
        items:
          $ref: '#/definitions/HarPostParam'
        type: array
        x-go-name: Params
      text:
        description: Plain text posted data
        type: string
        x-go-name: Text
    title: HarPostData describes posted data, if any (embedded in <request> object).
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarPostParam:
    properties:
      comment:
        description: optional (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      contentType:
        description: optional content type of posted file.
        type: string
        x-go-name: ContentType
      fileName:
        description: optional name of a posted file.
        type: string
        x-go-name: FileName
      name:
        description: name of a posted parameter.
        type: string
        x-go-name: Name
      value:
        description: optional value of a posted parameter or content of a posted file.
        type: string
        x-go-name: Value
    title: HarPostParam is a list of posted parameters, if any (embedded in <postData>
      object).
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarRequest:
    properties:
      bodySize:
        description: |-
          Size of the request body (POST data payload) in bytes. Set to -1 if the
          info is not available.
        format: int64
        type: integer
        x-go-name: BodySize
      comment:
        description: (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      cookies:
        description: List of cookie objects.
        items:
          $ref: '#/definitions/HarCookie'
        type: array
        x-go-name: Cookies
      headerSize:
        description: |-
          Total number of bytes from the start of the HTTP request message until
          (and including) the double CRLF before the body. Set to -1 if the info
          is not available.
        format: int64
        type: integer
        x-go-name: HeaderSize
      headers:
        description: List of header objects.
        items:
          $ref: '#/definitions/NVP'
        type: array
        x-go-name: Headers
      httpVersion:
        description: HarRequest HTTP Version.
        type: string
        x-go-name: HTTPVersion
      method:
        description: HarRequest method (GET, POST, ...).
        type: string
        x-go-name: Method
      postData:
        $ref: '#/definitions/HarPostData'
      queryString:
        description: List of query parameter objects.
        items:
          $ref: '#/definitions/NVP'
        type: array
        x-go-name: QueryString
      url:
        description: Absolute URL of the request (fragments are not included).
        type: string
        x-go-name: URL
    title: HarRequest contains detailed info about performed request.
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarResponse:
    properties:
      bodySize:
        description: |-
          Size of the received response body in bytes. Set to zero in case of
          responses coming from the cache (304). Set to -1 if the info is not
          available.
        format: int64
        type: integer
        x-go-name: BodySize
      comment:
        description: optional (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      content:
        $ref: '#/definitions/HarResponseContent'
      cookies:
        description: List of cookie objects.
        items:
          $ref: '#/definitions/HarCookie'
        type: array
        x-go-name: Cookies
      headers:
        description: List of header objects.
        items:
          $ref: '#/definitions/NVP'
        type: array
        x-go-name: Headers
      headersSize:
        description: |-
          Total number of bytes from the start of the HTTP response message until
          (and including) the double CRLF before the body. Set to -1 if the info is
          not available.
          The size of received response-headers is computed only from headers that
          are really received from the server. Additional headers appended by the
          browser are not included in this number, but they appear in the list of
          header objects.
        format: int64
        type: integer
        x-go-name: HeadersSize
      httpVersion:
        description: HarResponse HTTP Version.
        type: string
        x-go-name: HTTPVersion
      redirectURL:
        description: Redirection target URL from the Location response header.
        type: string
        x-go-name: RedirectURL
      status:
        description: HarResponse status.
        format: int64
        type: integer
        x-go-name: Status
      statusText:
        description: HarResponse status description.
        type: string
        x-go-name: StatusText
    title: HarResponse contains detailed info about the response.
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  HarResponseContent:
    properties:
      _file:
        description: |-
          optional (community enhancement) A path to an attached file containing this content
          used by Playwright
        type: string
        x-go-name: File
      comment:
        description: optional (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      compression:
        description: |-
          optional Number of bytes saved. Leave out this field if the information
          is not available.
        format: int64
        type: integer
        x-go-name: Compression
      encoding:
        description: |-
          optional (new in 1.2) Encoding used for response text field e.g
          "base64". Leave out this field if the text field is HTTP decoded
          (decompressed & unchunked), than trans-coded from its original character
          set into UTF-8.
        type: string
        x-go-name: Encoding
      mimeType:
        description: |-
          MIME type of the response text (value of the HarResponseContent-Type response
          header). The charset attribute of the MIME type is included (if
          available).
        type: string
        x-go-name: MimeType
      size:
        description: |-
          Length of the returned content in bytes. Should be equal to
          response.bodySize if there is no compression and bigger when the content
          has been compressed.
        format: int64
        type: integer
        x-go-name: Size
      text:
        description: |-
          optional HarResponse body sent from the server or loaded from the browser
          cache. This field is populated with textual content only. The text field
          is either HTTP decoded text or encoded (e.g. "base64") representation of
          the response body. Leave out this field if the information is not
          available.
        type: string
        x-go-name: Text
    title: HarResponseContent describes details about response content (embedded in
      <response> object).
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  MethodType:
    description: MethodType for HTTP
    type: string
    x-go-package: github.com/bhatti/api-mock-service/internal/types
  NVP:
    description: NVP is simply a name/value pair with a comment
    properties:
      comment:
        type: string
        x-go-name: Comment
      name:
        type: string
        x-go-name: Name
      value:
        type: string
        x-go-name: Value
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  PageTiming:
    description: All times are specified in milliseconds. If a time info is not available
      appropriate field is set to -1.
    properties:
      comment:
        description: (new in 1.2) A comment provided by the user or the application.
        type: string
        x-go-name: Comment
      onContentLoad:
        description: |-
          HarResponseContent of the page loaded. Number of milliseconds since page load started
          (page.startedDateTime). Use -1 if the timing does not apply to the current
          request.
          Depending on the browser, onContentLoad property represents DOMContentLoad
          event or document.readyState == interactive.
        format: int64
        type: integer
        x-go-name: OnContentLoad
      onLoad:
        description: |-
          HarPage is loaded (onLoad event fired). Number of milliseconds since page
          load started (page.startedDateTime). Use -1 if the timing does not apply
          to the current request.
        format: int64
        type: integer
        x-go-name: OnLoad
    title: PageTiming describes timings for various events (states) fired during the
      page load.
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  PageTimings:
    description: All times are specified in milliseconds.
    properties:
      blocked:
        format: int64
        type: integer
        x-go-name: Blocked
      comment:
        description: |-
          optional (new in 1.2) - Time required for SSL/TLS negotiation. If this
          field is defined then the time is also included in the connect field (to
          ensure backward compatibility with HAR 1.1). Use -1 if the timing does not
          apply to the current request.
        type: string
        x-go-name: Comment
      connect:
        description: |-
          optional - DNS resolution time. The time required to resolve a host name.
          Use -1 if the timing does not apply to the current request.
        format: int64
        type: integer
        x-go-name: Connect
      dns:
        description: |-
          optional - Time spent in a queue waiting for a network connection. Use -1
          if the timing does not apply to the current request.
        format: int64
        type: integer
        x-go-name: DNS
      receive:
        description: Waiting for a response from the server.
        format: int64
        type: integer
        x-go-name: Receive
      send:
        description: |-
          optional - Time required to create TCP connection. Use -1 if the timing
          does not apply to the current request.
        format: int64
        type: integer
        x-go-name: Send
      ssl:
        description: Time required to read entire response from the server (or cache).
        format: int64
        type: integer
        x-go-name: Ssl
      wait:
        description: Time required to send HTTP request to the server.
        format: int64
        type: integer
        x-go-name: Wait
    title: PageTimings describes various phases within request-response round trip.
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types/archive
  ProducerContractRequest:
    description: ProducerContractRequest for generating fuzz-data requests to an API
      implementation for producer based contract testing
    properties:
      base_url:
        description: BaseURL of remote server
        type: string
        x-go-name: BaseURL
      execution_times:
        description: ExecutionTimes for contract testing
        format: int64
        type: integer
        x-go-name: ExecutionTimes
      verbose:
        description: Verbose setting
        type: boolean
        x-go-name: Verbose
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types
  ProducerContractResponse:
    description: ProducerContractResponse for returning summary of producer based
      test results
    properties:
      errors:
        additionalProperties:
          type: string
        type: object
        x-go-name: Errors
      failed:
        format: int64
        type: integer
        x-go-name: Failed
      metrics:
        additionalProperties:
          format: double
          type: number
        type: object
        x-go-name: Metrics
      results:
        additionalProperties:
          type: string
        type: object
        x-go-name: Results
      succeeded:
        format: int64
        type: integer
        x-go-name: Succeeded
      urls:
        additionalProperties:
          format: int64
          type: integer
        type: object
        x-go-name: URLs
    type: object
    x-go-package: github.com/bhatti/api-mock-service/internal/types
paths:
  /_contracts/{group}:
    post:
      operationId: postProducerContractGroupScenario
      parameters:
      - in: path
        name: group
        required: true
        type: string
        x-go-name: Group
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/ProducerContractRequest'
      responses:
        "200":
          $ref: '#/responses/apiScenarioContractResponse'
      summary: Invokes service api-contract by group of api contracts.
      tags:
      - producer-contract
  /_contracts/{method}/{name}/{path}:
    post:
      operationId: postProducerContractScenarioByPath
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/ProducerContractRequest'
      responses:
        "200":
          $ref: '#/responses/apiScenarioContractResponse'
      summary: Invokes service api-contract by method, contracts-name and path.
      tags:
      - producer-contract
  /_contracts/history/{group}:
    post:
      operationId: postProducerContractHistoryByGroup
      parameters:
      - in: path
        name: group
        required: true
        type: string
        x-go-name: Group
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/ProducerContractRequest'
      responses:
        "200":
          $ref: '#/responses/apiScenarioContractResponse'
      summary: Invokes service api-contract using executed history of consumer contracts.
      tags:
      - producer-contract
  /_exec_history/har:
    get:
      operationId: getExecHistoryHar
      parameters:
      - in: query
        name: group
        type: string
        x-go-name: Group
      - in: query
        name: page
        type: string
        x-go-name: Page
      responses:
        "200":
          $ref: '#/responses/execHistoryHarResponse'
      summary: Fetches execution history in the format of HTTP HAR.
      tags:
      - exec-history
    post:
      operationId: postExecHistoryHar
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/Har'
      responses:
        "200":
          $ref: '#/responses/postExecHistoryHarResponse'
      summary: Uploads HAR contents and generates scenario and history.
      tags:
      - exec-history
  /_exec_history/names:
    get:
      operationId: getExecHistoryNames
      responses:
        "200":
          $ref: '#/responses/execHistoryNamesResponse'
      summary: Fetches history of api scenarios by group.
      tags:
      - exec-history
  /_fixtures/{method}/{name}/{path}:
    delete:
      operationId: deleteAPITestFixture
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/emptyResponse'
      summary: Deletes an existing api-test-fixtures based on name and path.
      tags:
      - api-test-fixtures
    get:
      operationId: getAPITestFixture
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/apiFixtureResponse'
      summary: Finds an existing api-test-fixtures based on name and path.
      tags:
      - api-test-fixtures
    post:
      operationId: postAPITestFixture
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - in: body
        name: Body
        schema:
          items:
            format: uint8
            type: integer
          type: array
      responses:
        "200":
          $ref: '#/responses/apiFixtureResponse'
      summary: Creates new api-test-fixtures based on request body.
      tags:
      - api-test-fixtures
  /_fixtures/{method}/fixtures/{path}:
    get:
      operationId: getAPITestFixtureNames
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/apiFixtureNamesResponse'
      summary: Finds api test-fixture names for given method and path.
      tags:
      - api-test-fixtures
  /_oapi:
    post:
      operationId: postMockOAPIScenario
      parameters:
      - in: body
        name: Body
        schema:
          items:
            format: uint8
            type: integer
          type: array
      responses:
        "200":
          $ref: '#/responses/apiScenarioOAPIResponse'
      summary: Creates new api scenarios based on Open API v3 uploaded by user.
      tags:
      - open-api
  /_oapi/{group}:
    get:
      operationId: getOpenAPISpecsByGroup
      parameters:
      - in: path
        name: group
        required: true
        type: string
        x-go-name: Group
      responses:
        "200":
          $ref: '#/responses/apiOapiSpecIResponse'
      summary: Generates OpenAPI specs by group of API scenarios.
      tags:
      - open-api
  /_oapi/{method}/{name}/{path}:
    get:
      operationId: getOpenAPISpecsByScenario
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/apiOapiSpecIResponse'
      summary: Generates OpenAPI specs for the API scenario by method, name and path.
      tags:
      - open-api
  /_oapi/history/{name}:
    get:
      operationId: getOpenAPISpecsByHistory
      parameters:
      - description: Name of open-api spec
        in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      responses:
        "200":
          $ref: '#/responses/apiOapiSpecIResponse'
      summary: Generates OpenAPI specs based on name of API scenario from execution
        history.
      tags:
      - open-api
  /_proxy:
    delete:
      operationId: deleteAPIProxy
      summary: Records scenario for the API DELETE request.
      tags:
      - api-proxy
    get:
      operationId: getAPIProxy
      summary: Records scenario for the API GET request.
      tags:
      - api-proxy
    post:
      operationId: postAPIProxy
      summary: Records scenario for the API POST request.
      tags:
      - api-proxy
    put:
      operationId: putAPIProxy
      summary: Records scenario for the API PUT request.
      tags:
      - api-proxy
  /_scenarios:
    get:
      operationId: listMockScenario
      responses:
        "200":
          $ref: '#/responses/apiScenarioPathsResponse'
      summary: List paths of all scenarios with group if available.
      tags:
      - api-scenarios
    post:
      operationId: postMockScenario
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/APIScenario'
      responses:
        "200":
          $ref: '#/responses/apiScenarioResponse'
      summary: Creates new api scenario based on request body.
      tags:
      - api-scenarios
  /_scenarios/{method}/{name}/{path}:
    delete:
      operationId: getAPIScenario
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/emptyResponse'
      summary: Deletes an existing api scenario based on id.
      tags:
      - api-scenarios
    get:
      operationId: getAPIScenario
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/emptyResponse'
      summary: Deletes an existing api scenario based on id.
      tags:
      - api-scenarios
  /_scenarios/{method}/names/{path}:
    get:
      operationId: getAPIScenarioNames
      parameters:
      - in: path
        name: method
        required: true
        type: string
        x-go-name: Method
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/apiNamesResponse'
      summary: Finds api scenario names by method and path.
      tags:
      - api-scenarios
  /_scenarios/groups:
    get:
      operationId: getAPIGroups
      responses:
        "200":
          $ref: '#/responses/apiGroupsResponse'
      summary: Finds api scenario groups.
      tags:
      - api-scenarios
  /{path}:
    delete:
      operationId: deleteRoot
      parameters:
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      summary: Play API scenario for previously defined API contract based on DELETE
        request.
      tags:
      - consumer-contract
    get:
      operationId: getRoot
      parameters:
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      summary: Play API scenario for previously defined API contract based on GET
        request.
      tags:
      - consumer-contract
    head:
      operationId: headRoot
      parameters:
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      summary: Play API scenario for previously defined API contract based on HEAD
        request.
      tags:
      - consumer-contract
    options:
      operationId: optionsRoot
      parameters:
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      summary: Play API scenario for previously defined API contract based on OPTIONS
        request.
      tags:
      - consumer-contract
    patch:
      operationId: patchRoot
      parameters:
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      summary: Play API scenario for previously defined API contract based on PATCH
        request.
      tags:
      - consumer-contract
    post:
      operationId: postRoot
      parameters:
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      summary: Play API scenario for previously defined API contract based on POST
        request.
      tags:
      - consumer-contract
    put:
      operationId: putRoot
      parameters:
      - in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      summary: Play API scenario for previously defined API contract based on PUT
        request.
      tags:
      - consumer-contract
responses:
  apiFixtureNamesResponse:
    description: APIFixture names
    schema:
      items:
        type: string
      type: array
  apiFixtureResponse:
    description: APIFixture body for update
    schema:
      items:
        format: uint8
        type: integer
      type: array
  apiGroupsResponse:
    description: APIScenario groups
    schema:
      items:
        type: string
      type: array
  apiNamesResponse:
    description: APIScenario names
    schema:
      items:
        type: string
      type: array
  apiOapiSpecIResponse:
    description: APIScenario body for update
    schema:
      items:
        format: uint8
        type: integer
      type: array
  apiScenarioContractResponse:
    description: APIScenario body for update
    schema:
      $ref: '#/definitions/ProducerContractResponse'
  apiScenarioOAPIResponse:
    description: APIScenario body for update
    schema:
      $ref: '#/definitions/APIScenario'
  apiScenarioPathsResponse:
    description: APIScenario summary and paths
    schema:
      additionalProperties:
        $ref: '#/definitions/APIKeyData'
      type: object
  apiScenarioResponse:
    description: APIScenario body for update
    schema:
      $ref: '#/definitions/APIScenario'
  emptyResponse:
    description: ""
  execHistoryHarResponse:
    description: ""
    schema:
      items:
        $ref: '#/definitions/HarLog'
      type: array
  execHistoryNamesResponse:
    description: ""
    schema:
      items:
        type: string
      type: array
  postExecHistoryHarResponse:
    description: ""
swagger: "2.0"
